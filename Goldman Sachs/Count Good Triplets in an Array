#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
  
#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>

class Solution {
public:
    long long goodTriplets(vector<int>& nums1, vector<int>& nums2) {
        
        int n = nums1.size();
        long long int ans=0;
        
        vector<int>position(n);
        for(int i=0; i<n; i++){
            position[nums2[i]] = i;
        }
        
        ordered_set left,right;
        left.insert(position[nums1[0]]);
        
        for(int i=2; i<n; i++){
            right.insert(position[nums1[i]]);
        }
        
        for(int i=1; i<n-1; i++){
            int ptr = position[nums1[i]];
            int left_count = left.order_of_key(ptr);
            
            int right_count = right.size() - right.order_of_key(ptr);
            ans+=(left_count*1LL*right_count);
            
            left.insert(ptr);
            right.erase(position[nums1[i+1]]);
        }
        return ans;
    }
};
