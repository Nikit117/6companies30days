/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> getAllElements(TreeNode* root1, TreeNode* root2) {
        vector<int>ans;
        stack<TreeNode*>s1,s2;
        solve(root1,s1);
        solve(root2,s2);
        
        while(!s1.empty() && !s2.empty()){
            
            if(s1.top()->val < s2.top()->val){
                ans.push_back(s1.top()->val);
                TreeNode *root = s1.top();
                s1.pop();
                
                if(root->right){
                    s1.push(root->right);
                    solve(root->right->left,s1);
                }
            }
            
            else{
                ans.push_back(s2.top()->val);
                TreeNode *root = s2.top();
                s2.pop();
                
                if(root->right){
                    s2.push(root->right);
                    solve(root->right->left,s2);
                }
            }
        }
        
        while(!s1.empty()){
            ans.push_back(s1.top()->val);
            TreeNode *root = s1.top();
            s1.pop();
            
            if(root->right){
                s1.push(root->right);
                solve(root->right->left,s1);
            }
        }
        while(!s2.empty()){
            
            ans.push_back(s2.top()->val);
            TreeNode *root = s2.top();
            s2.pop();
            if(root->right){
                s2.push(root->right);
                solve(root->right->left,s2);
            }
        }
        return ans;
    }
    
    void solve(TreeNode *root, stack<TreeNode*>&s){
        if(!root)
            return;
        
        s.push(root);
        solve(root->left,s);
    }
};
