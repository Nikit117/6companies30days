class Solution {
public:

vector<int> largestDivisibleSubset(vector<int>& nums) {
    
    int n = nums.size();
    sort(nums.begin(), nums.end());  
    
    vector<int> dp(n+1, 1);
    int max = 1;
    
    for(int i=1; i<n; i++){
        
        for(int j=0; j<i; j++){
            
            if(nums[i]%nums[j] == 0 && 1+dp[j] > dp[i]){
                dp[i] = 1+dp[j];
                if(max < dp[i])   
                    max = dp[i];
            }
        }
    }
    
    vector<int> ans;
    int prev = -1;
    
    for(int i=n-1; i>=0; i--){  
        if(dp[i] == max && (prev == -1 || prev%nums[i] == 0)){
            ans.push_back(nums[i]);
            max -= 1;
            prev = nums[i];
        }
    }

    
    return ans;
    
}
};
