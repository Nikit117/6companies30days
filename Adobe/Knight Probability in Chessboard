class Solution {
public:
    double knightProbability(int n, int k, int row, int column) {
        
        vector<vector<double>>curr(n,vector<double>(n,0)),next(n,vector<double>(n,0));
        curr[row][column] = 1.0;
        if(k==0)
            return 1.0;
        
        for(int move=1; move<=k; move++){
            
            for(int i=0; i<n; i++){
                
                for(int j=0; j<n; j++){
                    
                    if(curr[i][j] != 0){
                        if(i+2<n && j+1<n)
                            next[i+2][j+1] += curr[i][j]*(1/8.0);
                        
                        if(i+2<n && j-1>=0)
                            next[i+2][j-1] += curr[i][j]*(1/8.0);
                        
                        if(i+1<n && j+2<n)
                            next[i+1][j+2] += curr[i][j]*(1/8.0);
                        
                        if(i+1<n && j-2>=0)
                            next[i+1][j-2] += curr[i][j]*(1/8.0);
                        
                        if(i-2>=0 && j+1<n)
                            next[i-2][j+1] += curr[i][j]*(1/8.0);
                        
                        if(i-2>=0 && j-1>=0)
                            next[i-2][j-1] += curr[i][j]*(1/8.0);
                        
                        if(i-1>=0 && j+2<n)
                            next[i-1][j+2] += curr[i][j]*(1/8.0);
                        
                        if(i-1>=0 && j-2>=0)
                            next[i-1][j-2] += curr[i][j]*(1/8.0);
                        
                        next[i][j] = 0;
                    }
                }
            }
            curr = next;
        }
        
        double ans=0;
        
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                ans+=next[i][j];
            }
        }
        
        return ans;
    }
};
