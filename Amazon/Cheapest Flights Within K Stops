class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
        
        vector<pair<int,int>>adj[n];
        for(int i=0; i<flights.size(); i++){
            adj[flights[i][0]].push_back({flights[i][1],flights[i][2]});
        }
        
        queue<pair<int,pair<int,int>>>q;
        q.push({0,{src,0}});
        vector<int>distance(n,INT_MAX);
        distance[src] = 0;
        
        while(!q.empty()){
            
            int stop = q.front().first;
            int node = q.front().second.first;
            int dis = q.front().second.second;
            q.pop();
            
            vector<pair<int,int>> :: iterator itr;
            for(itr=adj[node].begin(); itr!=adj[node].end(); itr++){
                int total_distance = dis + itr->second;
                
                if(total_distance < distance[itr->first] && stop+1<=k+1){
                    q.push({stop+1,{itr->first,total_distance}});
                    distance[itr->first] = total_distance;
                }
            }
        }
        
        if(distance[dst]==INT_MAX)
            return -1;
        
        return distance[dst];
    }
};
